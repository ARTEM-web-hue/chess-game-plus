from flask import Flask, render_template, request, jsonify, session, redirect, url_for, flash
from supabase_client import supabase
import chess
import json
from config import Config

app = Flask(__name__)
app.config.from_object(Config)

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        email = request.form['email']
        password = request.form['password']
        
        try:
            response = supabase.login_user(email, password)
            if response and response.user:
                session['user'] = {
                    'id': response.user.id,
                    'email': response.user.email,
                    'username': response.user.user_metadata.get('username', '')
                }
                return redirect(url_for('dashboard'))
            else:
                flash('–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å', 'error')
        except Exception as e:
            flash('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É', 'error')
            print(f"Login error: {e}")
    
    return render_template('login.html')

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        email = request.form['email']
        password = request.form['password']
        username = request.form['username']
        
        try:
            response = supabase.create_user(email, password, username)
            if response and response.user:
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
                supabase.create_profile(response.user.id, username)
                session['user'] = {
                    'id': response.user.id,
                    'email': response.user.email,
                    'username': username
                }
                flash('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!', 'success')
                return redirect(url_for('dashboard'))
            else:
                flash('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', 'error')
        except Exception as e:
            flash('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', 'error')
            print(f"Registration error: {e}")
    
    return render_template('register.html')

@app.route('/logout')
def logout():
    session.pop('user', None)
    flash('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã', 'success')
    return redirect(url_for('index'))
@app.route('/debug')
def debug():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    import os
    info = {
        'supabase_url': os.environ.get('SUPABASE_URL'),
        'supabase_key_length': len(os.environ.get('SUPABASE_KEY', '')) if os.environ.get('SUPABASE_KEY') else 0,
        'config_url': Config.SUPABASE_URL,
        'config_key_length': len(Config.SUPABASE_KEY) if Config.SUPABASE_KEY else 0,
        'message': 'Supabase connected successfully!'
    }
    return jsonify(info)
@app.route('/dashboard')
def dashboard():
    if 'user' not in session:
        return redirect(url_for('login'))
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∞
    user_stats = {
        'wins': 0,
        'losses': 0, 
        'draws': 0,
        'rating': 1200,
        'games_played': 0
    }
    
    return render_template('dashboard.html', 
                         user=session['user'],
                         stats=user_stats,
                         games=[],
                         achievements=[])

@app.route('/play')
def play():
    if 'user' not in session:
        return redirect(url_for('login'))
    
    # –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–≥—Ä—ã
    return """
    <!DOCTYPE html>
    <html>
    <head>
        <title>–®–∞—Ö–º–∞—Ç–Ω–∞—è –∏–≥—Ä–∞</title>
        <style>
            body { 
                font-family: Arial, sans-serif; 
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                text-align: center;
                padding: 50px;
            }
            .game-container {
                background: rgba(255,255,255,0.1);
                padding: 30px;
                border-radius: 20px;
                backdrop-filter: blur(10px);
            }
        </style>
    </head>
    <body>
        <div class="game-container">
            <h1>üéØ –®–∞—Ö–º–∞—Ç–Ω–∞—è –∏–≥—Ä–∞</h1>
            <p>–ò–≥—Ä–æ–≤–æ–π –º–æ–¥—É–ª—å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...</p>
            <p>–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è —à–∞—Ö–º–∞—Ç–Ω–∞—è –¥–æ—Å–∫–∞!</p>
            <a href="/dashboard" style="color: #f39c12;">–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –¥–∞—à–±–æ—Ä–¥</a>
        </div>
    </body>
    </html>
    """

# –í—Ä–µ–º–µ–Ω–Ω—ã–µ API –º–µ—Ç–æ–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∞
@app.route('/api/create_game', methods=['POST'])
def create_game():
    if 'user' not in session:
        return jsonify({'error': 'Not authenticated'}), 401
    
    return jsonify({'game_id': 'temp-game', 'message': 'Game system in development'})

@app.route('/api/make_move', methods=['POST'])
def make_move():
    return jsonify({'message': 'Game system in development'})

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
